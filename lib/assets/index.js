// Generated by CoffeeScript 1.6.2
(function() {
  var assets, coffee, fs, fsUtils, loadEngineIO, loadFile, loadResponders, minifyJS, pathlib, send, uglifyjs, wrap;

  fs = require('fs');

  pathlib = require('path');

  uglifyjs = require('uglify-js');

  if (process.env['SS_DEV']) {
    coffee = require('coffee-script');
  }

  wrap = require('./wrap');

  fsUtils = require('../utils/file');

  assets = {
    libs: [],
    modules: {},
    initCode: []
  };

  exports.send = send = function(type, name, content, options) {
    if (options == null) {
      options = {};
    }
    if (coffee && options.coffee) {
      content = coffee.compile(content);
    }
    switch (type) {
      case 'code':
        return assets.initCode.push(content);
      case 'lib':
      case 'library':
        return assets.libs.push({
          name: name,
          content: content,
          options: options
        });
      case 'mod':
      case 'module':
        if (assets.modules[name]) {

        } else {
          return assets.modules[name] = {
            content: content,
            options: options
          };
        }
    }
  };

  exports.load = function() {
    var modDir;

    ['json.min.js', 'browserify.js', 'hogan.js'].forEach(function(fileName) {
      var code, path, preMinified;

      path = pathlib.join(__dirname, fileName);
      code = fs.readFileSync(path, 'utf8');
      preMinified = fileName.indexOf('.min') >= 0;
      return send('lib', fileName, code, {
        minified: preMinified
      });
    });
    modDir = pathlib.join(__dirname, '/modules');
    fsUtils.readDirSync(modDir).files.forEach(function(fileName) {
      var code, extension, modName, sp;

      code = fs.readFileSync(fileName, 'utf8');
      sp = fileName.split('.');
      extension = sp[sp.length - 1];
      modName = fileName.substr(modDir.length + 1);
      return send('mod', modName, code, {
        coffee: extension === 'coffee'
      });
    });
    loadResponders('events', 'events-responder');
    loadResponders('rpc', 'socketstream-rpc');
    return loadEngineIO();
  };

  /*
  # Load rpc && events
  loadEvents ->
    # Serve client code
    filePath = '../request/responders/events/client.' + (process.env['SS_DEV'] && 'coffee' || 'js')
    filePath = pathlib.resolve(__dirname, filePath)
    code = fs.readFileSync(filePath, 'utf8')
    send('mod', 'events-responder', code, {coffee: process.env['SS_DEV']})
  
  loadRPC ->
    filePath = '../request/responders/rpc/client.' + (process.env['SS_DEV'] && 'coffee' || 'js')
    filePath = pathlib.resolve(__dirname, filePath)
    code = fs.readFileSync(filePath, 'utf8')
    send('mod', 'socketstream-rpc', code, {coffee: process.env['SS_DEV']})
  */


  loadEngineIO = function() {
    var dir;

    dir = "../websocket/transports/engineio/";
    loadFile('lib', "" + dir + "client.js", 'engine.io-client');
    return loadFile('mod', "" + dir + "wrapper.js", 'socketstream-transport');
  };

  /*
  loadWrapper = ->
    ["wrapper", "client"].forEach(fileName) ->
      filePath = "../websocket/transports/engineio/#{fileName}.js"
      filePath = pathlib.resolve(__dirname, filePath)
      code = fs.readFileSync(filePath, 'utf8')
      send('mod', 'socketstream-transport', code)
  */


  loadResponders = function(dir, name) {
    var file;

    file = ("../request/responders/" + dir + "/client.") + (process.env['SS_DEV'] && 'coffee' || 'js');
    return loadFile('mod', file, name);
    /*
    filePath = pathlib.resolve(__dirname, filePath)
    code = fs.readFileSync(filePath, 'utf8')
    send('mod', name, code, {coffee: process.env['SS_DEV']})
    */

  };

  loadFile = function(type, file, name) {
    var code, config;

    if (pathlib.extname(file) === '.coffee') {
      config = {
        coffee: process.env['SS_DEV']
      };
    }
    file = pathlib.resolve(__dirname, file);
    code = fs.readFileSync(file, 'utf8');
    return send(type, name, code, config);
  };

  exports.serve = {
    js: function(options) {
      var code, mod, name, output, _ref;

      if (options == null) {
        options = {};
      }
      output = assets.libs.map(function(code) {
        return options.compress && !code.options.minified && minifyJS(code.content) || code.content;
      });
      _ref = assets.modules;
      for (name in _ref) {
        mod = _ref[name];
        code = wrap.module(name, mod.content);
        if (options.compress && !mod.options.minified) {
          code = minifyJS(code);
        }
        output.push(code);
      }
      return output.join("\n");
    },
    initCode: function() {
      return assets.initCode.join(" ");
    }
  };

  minifyJS = function(originalCode) {
    var ast, jsp, pro;

    jsp = uglifyjs.parser;
    pro = uglifyjs.uglify;
    ast = jsp.parse(originalCode);
    ast = pro.ast_mangle(ast);
    ast = pro.ast_squeeze(ast);
    return pro.gen_code(ast) + ';';
  };

}).call(this);
